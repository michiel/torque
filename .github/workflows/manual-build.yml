name: Build and Release Torque Binaries
on:
  workflow_dispatch:
    inputs:
      profile:
        description: 'Build profile'
        required: false
        default: 'release'
        type: choice
        options:
          - debug
          - release
      branch:
        description: 'Branch to build from'
        required: false
        default: 'main'
        type: string
  push:
    tags:
      - 'v*'

jobs:
  release:
    name: Build - ${{ matrix.platform.os-name }}
    strategy:
      matrix:
        platform:
          - os-name: linux-x86_64
            runs-on: ubuntu-24.04
            target: x86_64-unknown-linux-gnu
            binary-ext: ""

          # Disabled aarch64 Linux due to cross-compilation complexity with GUI dependencies
          # - os-name: linux-aarch64
          #   runs-on: ubuntu-24.04
          #   target: aarch64-unknown-linux-gnu
          #   binary-ext: ""

          - os-name: windows-x86_64
            runs-on: windows-latest
            target: x86_64-pc-windows-msvc
            binary-ext: ".exe"

          - os-name: macos-x86_64
            runs-on: macOS-latest
            target: x86_64-apple-darwin
            binary-ext: ""

          - os-name: macos-aarch64
            runs-on: macOS-latest
            target: aarch64-apple-darwin
            binary-ext: ""

    runs-on: ${{ matrix.platform.runs-on }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch || github.ref }}
          submodules: recursive

      # Set up Node.js for frontend builds
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'frontend/*/package-lock.json'

      # Build frontend assets
      - name: Install torque-client dependencies
        run: |
          cd frontend/torque-client
          npm ci

      - name: Install model-editor dependencies
        run: |
          cd frontend/model-editor
          npm ci

      - name: Build frontend assets
        run: |
          cd frontend/model-editor
          # Skip TypeScript checking to avoid compilation errors during build
          npx vite build

      # Set up system dependencies
      - name: Set up dependencies (Ubuntu only)
        if: startsWith(matrix.platform.runs-on, 'ubuntu-')
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev pkg-config musl-dev perl perl-modules-5.* libfindbin-libs-perl
          # Additional dependencies for Tauri on Linux
          sudo apt-get install -y libwebkit2gtk-4.1-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev

      - name: Set up dependencies (Windows only)
        if: startsWith(matrix.platform.runs-on, 'windows-')
        run: |
          # Install Strawberry Perl for vendored OpenSSL builds
          choco install strawberryperl -y
          # Add Strawberry Perl to PATH for this job
          echo "C:\strawberry\perl\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "C:\strawberry\c\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Set up dependencies (macOS only)
        if: startsWith(matrix.platform.runs-on, 'macOS-')
        run: |
          # Verify perl is available (usually pre-installed)
          perl -e "use FindBin;" && echo "Perl with FindBin ready for vendored builds"

      # Build Rust binaries
      - name: Build torque binary
        uses: houseabsolute/actions-rust-cross@v1
        env:
          OPENSSL_STATIC: "1"
        with:
          command: build
          target: ${{ matrix.platform.target }}
          args: "--locked --${{ github.event.inputs.profile || 'release' }} -p torque --features simd,mimalloc"
          strip: true

      - name: Install Tauri CLI
        run: |
          cargo install tauri-cli --version "^2.0" --locked
          
      - name: Build torque-desktop binary (Tauri)
        shell: bash
        run: |
          if [ "${{ matrix.platform.target }}" = "x86_64-pc-windows-msvc" ]; then
            # Windows: disable bundling for raw executable
            cargo tauri build --config '{"bundle":{"active":false}}'
          else
            # Linux/macOS: use native builds to avoid cross-compilation issues with GUI deps
            cargo tauri build
          fi
        env:
          TAURI_SIGNING_PRIVATE_KEY: ""
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ""

      # Package binaries
      - name: Package binaries
        shell: bash
        run: |
          profile="${{ github.event.inputs.profile || 'release' }}"
          target="${{ matrix.platform.target }}"
          os_name="${{ matrix.platform.os-name }}"
          binary_ext="${{ matrix.platform.binary-ext }}"
          
          mkdir -p dist
          
          # Copy torque binary
          cp "target/${target}/${profile}/torque${binary_ext}" "dist/torque-${os_name}${binary_ext}"
          
          # Copy torque-desktop binary (Tauri places binaries in different locations)
          if [ "$os_name" = "macos-x86_64" ] || [ "$os_name" = "macos-aarch64" ]; then
            # macOS: Tauri creates .app bundles, but we want the binary
            if [ -f "src-tauri/target/${target}/${profile}/torque-desktop${binary_ext}" ]; then
              cp "src-tauri/target/${target}/${profile}/torque-desktop${binary_ext}" "dist/torque-desktop-${os_name}${binary_ext}"
            elif [ -f "src-tauri/target/${target}/${profile}/bundle/macos/torque-desktop.app/Contents/MacOS/torque-desktop" ]; then
              cp "src-tauri/target/${target}/${profile}/bundle/macos/torque-desktop.app/Contents/MacOS/torque-desktop" "dist/torque-desktop-${os_name}"
            fi
          elif [ "$os_name" = "windows-x86_64" ]; then
            # Windows: Copy the raw binary (bundle disabled)
            if [ -f "src-tauri/target/${target}/${profile}/torque-desktop.exe" ]; then
              cp "src-tauri/target/${target}/${profile}/torque-desktop.exe" "dist/torque-desktop-${os_name}.exe"
            fi
          else
            # Linux: Tauri creates AppImage and other formats
            if [ -f "src-tauri/target/${target}/${profile}/torque-desktop${binary_ext}" ]; then
              cp "src-tauri/target/${target}/${profile}/torque-desktop${binary_ext}" "dist/torque-desktop-${os_name}${binary_ext}"
            elif [ -f "src-tauri/target/${target}/${profile}/bundle/appimage/torque-desktop_0.1.0_amd64.AppImage" ]; then
              cp "src-tauri/target/${target}/${profile}/bundle/appimage/torque-desktop_0.1.0_amd64.AppImage" "dist/torque-desktop-${os_name}.AppImage"
            fi
          fi
          
          # List what we actually have for debugging
          echo "Contents of target directories:"
          find target -name "*torque*" -type f || echo "No torque binaries found in target/"
          find src-tauri/target -name "*torque*" -type f || echo "No torque binaries found in src-tauri/target/"
          
          echo "Contents of dist directory:"
          ls -la dist/
          
          # Create checksums
          cd dist
          if command -v sha256sum > /dev/null; then
            sha256sum * > checksums-${os_name}.txt
          elif command -v shasum > /dev/null; then
            shasum -a 256 * > checksums-${os_name}.txt
          else
            echo "No checksum utility available"
          fi

      # Upload artifacts
      - name: Upload binaries as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.platform.os-name }}
          path: dist/
          retention-days: 90

  # Create GitHub release if this is a tag push
  create-release:
    needs: release
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/**/*
          draft: false
          prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

